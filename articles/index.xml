<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Jare&#39;s Blog</title>
    <link>https://thejare.github.io/articles/</link>
    <description>Recent content in Articles on Jare&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Jul 2012 00:35:38 +0000</lastBuildDate>
    
	<atom:link href="https://thejare.github.io/articles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Articles</title>
      <link>https://thejare.github.io/articles/</link>
      <pubDate>Mon, 09 Jul 2012 00:35:38 +0000</pubDate>
      
      <guid>https://thejare.github.io/articles/</guid>
      <description> HTML5/Canvas Game Lessons Fixed Timestep Loop DLL / Macro Tricks Init / End Protocol DLL Interfaces Rectangle Packer Praetorians DevDiary - sadly, was hosted in GameSpy and vanished one day Reducing Game Load Times Positional Printf  </description>
    </item>
    
    <item>
      <title>Rectangle Packing Code</title>
      <link>https://thejare.github.io/articles/rectangle-packing-code/</link>
      <pubDate>Sun, 25 Sep 2011 02:17:22 +0000</pubDate>
      
      <guid>https://thejare.github.io/articles/rectangle-packing-code/</guid>
      <description>Note: this article first appeared as a Tip Of The Day in Flipcode.
You have a bunch of rectangular pieces. You need to arrange them in a rectangular surface so that they don&amp;rsquo;t overlap, keeping the total area of the rectangle as small as possible. This is fairly common when arranging characters in a bitmapped font, lightmaps for a 3D engine, and I guess other situations as well.
The idea of this algorithm is that, as we add rectangles, we can pre-select &amp;ldquo;interesting&amp;rdquo; places where we can try to add the next rectangles.</description>
    </item>
    
    <item>
      <title>Reducing Game Load Times</title>
      <link>https://thejare.github.io/articles/reducing-game-load-times/</link>
      <pubDate>Sun, 25 Sep 2011 02:09:45 +0000</pubDate>
      
      <guid>https://thejare.github.io/articles/reducing-game-load-times/</guid>
      <description>Note: this article was originally found at Tip Of The Day in Flipcode.
Sebastian Wagner started an interesting thread on this topic, but my response got long enough that I think a totd is more appropriate.
I will explain some of the things we did in Commandos 2 and Praetorians in order to speed up load times. Notice that in Praetorians, some levels will load in one or two seconds, with five seconds maybe for the largest, so for the most part the load time.</description>
    </item>
    
    <item>
      <title>Positional Printf</title>
      <link>https://thejare.github.io/articles/positional-printf/</link>
      <pubDate>Sun, 25 Sep 2011 02:01:49 +0000</pubDate>
      
      <guid>https://thejare.github.io/articles/positional-printf/</guid>
      <description>Note: this article was originally found at Code Of The Day in Flipcode.
Printf-style formatting is well known, flexible and very useful in general. All the worries about unchecked parameters and so on have proven to be a non-Ã­ssue in my experience. However, it lacks parameter positioning, the way .NET allows. Why is this important for games? Any modern game needs to have a good localisation system; most game translators understand printf-style format strings and know what to do with them when they are among the text strings to be localised.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Object Initialization and Finalization Protocol</title>
      <link>https://thejare.github.io/articles/init-end/</link>
      <pubDate>Sun, 25 Sep 2011 01:56:32 +0000</pubDate>
      
      <guid>https://thejare.github.io/articles/init-end/</guid>
      <description>Note: this article first appeared as a Tip Of The Day in Flipcode.
This is a coding procedure we have adopted as standard in all of Pyro Studios projects. The roots of it probably come from the fact that the first Object Oriented language I learned was Borland&amp;rsquo;s Turbo Pascal 5; it didn&amp;rsquo;t have automatic construction or destruction calls, so you had to initialize the instances explicitly. Ok, no big deal, the real benefits were extensible classes and virtual methods.</description>
    </item>
    
    <item>
      <title>LoadLibrary-GetProcAddress Fun</title>
      <link>https://thejare.github.io/articles/loadlibrary-getprocaddress-fun/</link>
      <pubDate>Sun, 25 Sep 2011 01:56:32 +0000</pubDate>
      
      <guid>https://thejare.github.io/articles/loadlibrary-getprocaddress-fun/</guid>
      <description>Note: this article first appeared as a Tip Of The Day in Flipcode.
I explain a macro trick used by the authors of the BASS sound library to help with dynamic loading of the DLL; then I introduce a way to make it even easier to apply. Afterwards I extend the idea with a modified macro + a header file trick which useful by itself. 3 totds in one! ðŸ™‚</description>
    </item>
    
    <item>
      <title>Windows DLL Interfacing via abstract classes</title>
      <link>https://thejare.github.io/articles/dll-interfaces/</link>
      <pubDate>Sun, 25 Sep 2011 01:56:32 +0000</pubDate>
      
      <guid>https://thejare.github.io/articles/dll-interfaces/</guid>
      <description>Importing functions from a DLL loaded at run-time via ::LoadLibrary() is a cumbersome and error-prone process. You must declare a few pointers to functions, refer to these functions by name, typecast the pointer returned by ::GetProcAddress()&amp;hellip; bah, that may be fine for a couple functions, but when the interface starts to grow, it&amp;rsquo;s a real pain to do. What&amp;rsquo;s more, the DLL may be interested in using some services provided by the loading application, but ::GetProcAddress() can&amp;rsquo;t handle that.</description>
    </item>
    
    <item>
      <title>Main Loop with Fixed Time Steps</title>
      <link>https://thejare.github.io/articles/main-loop-with-fixed-time-steps/</link>
      <pubDate>Sun, 25 Sep 2011 01:38:53 +0000</pubDate>
      
      <guid>https://thejare.github.io/articles/main-loop-with-fixed-time-steps/</guid>
      <description>Note: this article first appeared as a Tip Of The Day in Flipcode.
The following description came up during a thread in the SWEng mailing list, and I thought it would make and interesting Tip Of The Day. Thanks to Neil Stewart for his input, and Dave Smith for bringing it up in the first place.
Most games want to keep a consistent gameplay speed regardless of the framerate achieved by the visuals.</description>
    </item>
    
  </channel>
</rss>