<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>System on Jare&#39;s Blog</title>
    <link>https://thejare.github.io/categories/system/</link>
    <description>Recent content in System on Jare&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Jan 2012 03:47:06 +0000</lastBuildDate>
    <atom:link href="https://thejare.github.io/categories/system/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>node.js</title>
      <link>https://thejare.github.io/2012/01/node.js/</link>
      <pubDate>Sat, 28 Jan 2012 03:47:06 +0000</pubDate>
      
      <guid>https://thejare.github.io/2012/01/node.js/</guid>
      <description>&lt;p&gt;cdoral in &lt;a href=&#34;http://www.iguanademos.com/Jare/wp/?p=2385#comment-3491&#34;&gt;another post&lt;/a&gt; mentions &lt;a href=&#34;http://nodejs.org/&#34; target=&#34;_blank&#34;&gt;node.js&lt;/a&gt;. I have been following this project for a while so I thought I&amp;#8217;d write a little blurb about it and include a few links for further and more in-depth information. Coincidentally, the &lt;a href=&#34;http://nodesummit.com/&#34; target=&#34;_blank&#34;&gt;Node Summit&lt;/a&gt; was held this week in SF, so there may be interesting and fresh material coming from there soon.&lt;/p&gt;

&lt;p&gt;First things first: I have played with node.js for little experiments but haven&amp;#8217;t yet found an opportunity to put it to real, production use. Version 0.6 addressed some of my questions about its capabilities and performance, and it is already being used on production servers for many traffic-heavy sites like eBay or LinkedIn, so it&amp;#8217;s clearly gone beyond the experimental stage. If you are building a web service today, node.js is a technology you should consider.&lt;/p&gt;

&lt;p&gt;Node is a stand-alone executable that will run a JavaScript file passed on the command line:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;node app.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your JavaScript program can use the standard JavaScript libraries (Math, etc) and a bunch of node-specific libraries. In most cases, your program will enter an infinite event loop and start receiving, processing and responding to network requests.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uses JavaScript, the same language you are likely using (in part or in full) on the client side of web sites and applications. This is a great opportunity to reuse code and expertise across both sides.&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s based on Google&amp;#8217;s &lt;a href=&#34;http://code.google.com/p/v8/&#34; target=&#34;_blank&#34;&gt;V8 engine&lt;/a&gt;, which is being actively developed and keeps getting better, faster and more robust with each release.&lt;/li&gt;
&lt;li&gt;Its asynchronous, event-based nature makes it &lt;strong&gt;easy&lt;/strong&gt; for node applications to support hundreds or thousands of simultaneous connections with great performance and low resource consumption, compared to thread- or process-based solutions. Many modern servers, both standalone servers (&lt;a href=&#34;http://nginx.org/en/&#34; target=&#34;_blank&#34;&gt;nginx&lt;/a&gt;) as well as server application frameworks (&lt;a href=&#34;https://github.com/williame/hellepoll&#34; target=&#34;_blank&#34;&gt;Hellepoll&lt;/a&gt;, &lt;a href=&#34;http://www.tornadoweb.org/&#34; target=&#34;_blank&#34;&gt;Tornado&lt;/a&gt;), have gone this route.&lt;/li&gt;
&lt;li&gt;Node libraries and extensions use a standard distribution method called the &lt;a href=&#34;http://npmjs.org/doc/README.html&#34; target=&#34;_blank&#34;&gt;node package manager&lt;/a&gt;. It&amp;#8217;s incredibly easy to use and makes managing your external dependencies a breeze.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All I/O in node programs (files, databases, other servers, etc) is asynchronous and usually offered in &lt;a href=&#34;http://en.wikipedia.org/wiki/Continuation-passing_style&#34; target=&#34;_blank&#34;&gt;continuation-passing style&lt;/a&gt;. If you are not careful with the way you write your code, you may end up in callback hell. Some libraries like &lt;a href=&#34;https://github.com/caolan/async&#34; target=&#34;_blank&#34;&gt;async&lt;/a&gt; will help a lot there, but do not underestimate the cost of getting used to code with this paradigm.&lt;/li&gt;
&lt;li&gt;node is event-based, and that&amp;#8217;s it. It&amp;#8217;s easy to get great performance, but sometimes you need huge performance or scaling even if it&amp;#8217;s not easy (note &amp;#8211; it never is!). If your concurrency or scaling needs change in the future and other approaches (multithreaded, distributed) would serve you better, you will have to engineer around node (balancers, proxies, routers, hybrid services), or entirely rewrite your code using another technology that allows other solutions (C++, Erlang).&lt;/li&gt;
&lt;li&gt;Many classic hosting providers do not support node.js out of the box, and require renting a virtual server. Recent contenders in the platform-as-a-service space like &lt;a href=&#34;http://devcenter.heroku.com/articles/node-js&#34; target=&#34;_blank&#34;&gt;heroku&lt;/a&gt; do offer node.js support out of the box.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Node.js really is an application platform, not a plain web server &amp;#8211; you can use one of the popular node frameworks like &lt;a href=&#34;http://expressjs.com/&#34; target=&#34;_blank&#34;&gt;express &lt;/a&gt;to build a fully featured web server, and it will have almost the same throughput as dedicated servers like nginx or lighttpd. In broad terms, I look at them like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js if you&amp;#8217;re developing a web application (and its pros/cons are ok for you). Node may also serve the client web site, but its strength is in handling the server-side logic.&lt;/li&gt;
&lt;li&gt;Nginx if you are serving a single, custom web site that includes an application backend. Nginx configuration is simple but powerful for both static files and cgi modules, and it can also fill other roles (reverse proxy/load balancer or mail proxy) in your infrastructure.&lt;/li&gt;
&lt;li&gt;Apache if you are serving multiple sites, each may be built using different technologies (PHP, uwsgi, etc), and/or each may be managed by different people or clients. &lt;em&gt;Everyone&lt;/em&gt; and &lt;em&gt;everything&lt;/em&gt; knows, understands and/or is compatible with Apache configuration files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope to be able to talk more about node.js in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Text Editors</title>
      <link>https://thejare.github.io/2011/12/text-editors/</link>
      <pubDate>Thu, 15 Dec 2011 08:48:58 +0000</pubDate>
      
      <guid>https://thejare.github.io/2011/12/text-editors/</guid>
      <description>&lt;p&gt;Programmers spend most of our time in front of a text editor. Whether it is a standalone editor, or one integrated in an IDE, that&amp;#8217;s just what we do.&lt;/p&gt;

&lt;p&gt;Back in MS-DOS days, my editor of choice was &lt;a title=&#34;QEdit&#34; href=&#34;http://www.semware.com/&#34; target=&#34;_blank&#34;&gt;QEdit&lt;/a&gt;, later renamed to The Semware Editor. I loved its configurability, and remapped pretty much everything in it to suit my preferences. Around that time I was also working on Unix systems and used vi there, although only for short editing sessions. I had been exposed to &lt;a title=&#34;Emacs&#34; href=&#34;http://www.gnu.org/s/emacs/&#34; target=&#34;_blank&#34;&gt;Emacs&lt;/a&gt; multiple times (starting with MicroEmacs on the Atari ST), but I could never get comfortable with its crazy keyboard combos.&lt;/p&gt;

&lt;p&gt;After Windows 95 came and became my regular environment, the best choice was &lt;a title=&#34;Ultraedit&#34; href=&#34;http://www.ultraedit.com/&#34; target=&#34;_blank&#34;&gt;Ultraedit&lt;/a&gt;. Very soon, Microsoft Visual Studio became the compiler and IDE of choice for Win95 development, and its built-in editor proved quite powerful, so I would use Ultraedit for editing files that were not C++.&lt;/p&gt;

&lt;p&gt;The big annoyance with Ultraedit was that, being a paid product, it was not readily available everywhere I could go. At work, at someone else&amp;#8217;s computer, etc. And it seemed to become more bloated with each version. I started looking for alternatives, and settled with &lt;a title=&#34;SciTE&#34; href=&#34;http://www.scintilla.org/SciTE.html&#34; target=&#34;_blank&#34;&gt;SciTE&lt;/a&gt;. SciTE is the editor built around the Scintilla text-editing component / library. It&amp;#8217;s a very powerful and extensible text editor, but the default installation is rather barebones and lacks many useful text manipulation tools. I was also bothered by the way it implemented rectangular block selections. So I started looking for alternatives again.&lt;/p&gt;

&lt;p&gt;The next editor I used was &lt;a title=&#34;Notepad++&#34; href=&#34;http://notepad-plus-plus.org/&#34; target=&#34;_blank&#34;&gt;Notepad++&lt;/a&gt;, another editor built around Scintilla. Free, lots of features, and lots of free and easy to install plugins. I was completely comfortable with it, no major complaints. Ok well, yeah, one major complaint actually: the &amp;#8220;Find in Files&amp;#8221; dialog box was fixed in size, and the space available for the listbox of folders to search in was rather short. It was annoying to work with long, descriptive paths. I changed the dialog size and recompiled the editor, but it sucked to do that for every new version of the editor. The other issue with Notepad++ was that I was using Linux (Ubuntu) both at work and on my netbook, and Notepad++ is 100% Windows-only. Oh, and some of the settings are really awkward to configure. Yeah, a great editor, but a number of annoyances.&lt;/p&gt;

&lt;p&gt;In text-mode terminals on Ubuntu I had been using joe for quick edits, but for any significant amount of work I slowly started using (and getting used to) &lt;a title=&#34;vim&#34; href=&#34;http://www.vim.org/&#34; target=&#34;_blank&#34;&gt;vim&lt;/a&gt; again. Since I was restless with Notepad++, I tried getting used to gvim on Windows, but despite its &lt;a href=&#34;http://www.viemu.com/a-why-vi-vim.html&#34; target=&#34;_blank&#34;&gt;many good points&lt;/a&gt;, I just could not stomach it. When working in a GUI, sorry but I need at least decent multi-file support with tabs, Ctrl-N to quickly create a scratch file, and of course my Ctrl-C and Ctrl-V and common GUI shortcuts; gvim&amp;#8217;s UI is at odds with everything else in the GUI world.&lt;/p&gt;

&lt;p&gt;Then someone pointed me to &lt;a title=&#34;Sublime Text 2&#34; href=&#34;http://www.sublimetext.com/&#34; target=&#34;_blank&#34;&gt;Sublime Text 2&lt;/a&gt;. Great editor, lots of tools, features, and neat details. Works on Windows, Mac and Linux. Supports the notion of projects. Scriptable in Python, awesome! I have been using it on and off for a while to see if I really want to switch to it. It is a commercial product, and I suspect that some of the old ghosts with rectangular block selections and Find in Files will come back and deter me from ST2, but for now I&amp;#8217;m enjoying it. I wrote a little plugin to add basic Perforce integration:&lt;/p&gt;

&lt;pre&gt;# Simple Perforce plugin for Sublime Text 2
# (C) 2011 by Javier Arevalo
# Free for anyone to use, distribute and modify

# Copy this file to ST2&#39;s Data/Packages/User/perforce.py
# Add the functions to the Tools menu with the following in a file named
#   Data/Packages/User/Main.sublime-menu:
#[
#    {
#        &#34;id&#34;: &#34;tools&#34;,
#        &#34;children&#34;:
#        [
#            { &#34;caption&#34;: &#34;-&#34; },
#            { &#34;command&#34;: &#34;p4_edit&#34;, &#34;caption&#34;: &#34;P4 Edit&#34; },
#            { &#34;command&#34;: &#34;p4_revert&#34;, &#34;caption&#34;: &#34;P4 Revert&#34; },
#            { &#34;command&#34;: &#34;p4_add&#34;, &#34;caption&#34;: &#34;P4 Add&#34; }
#        ]
#    }
#]
# And/or in Data/Packages/User/Context.sublime-menu:
#[
#    { &#34;caption&#34;: &#34;-&#34; },
#    { &#34;command&#34;: &#34;p4_edit&#34;, &#34;caption&#34;: &#34;P4 Edit&#34; },
#    { &#34;command&#34;: &#34;p4_revert&#34;, &#34;caption&#34;: &#34;P4 Revert&#34; },
#    { &#34;command&#34;: &#34;p4_add&#34;, &#34;caption&#34;: &#34;P4 Add&#34; }
#]

import sublime, sublime_plugin
import os, stat

def UpdateViewWriteability(view):
    if view.file_name():
        if os.access(view.file_name(), os.W_OK):
            view.set_read_only(False)
        else:
            view.set_read_only(True)

# Detect readonly / writable files
# These are both false for non-file buffers
def IsWriteable(view):
    return view.file_name() and os.access(view.file_name(), os.W_OK)

def IsWriteProtected(view):
    return view.file_name() and not os.access(view.file_name(), os.W_OK)

# Event to catch buffer activation and check readonly/writeable
# Note: Running the commands doesn&#39;t de- and re-activate the view focus,
# so the ReadOnlyCheck event doesn&#39;t fire. We call the function manually
# for each command.
class ReadOnlyCheck(sublime_plugin.EventListener):
    def on_activated(self, view):
        UpdateViewWriteability(view)

# Commands

class P4EditCommand(sublime_plugin.TextCommand):
    &#34;&#34;&#34;P4 Edit&#34;&#34;&#34;
    def run(self, edit):
        os.system(&#34;p4 edit \&#34;&#34; + self.view.file_name() + &#34;\&#34;&#34;)
        UpdateViewWriteability(self.view) 

    def is_enabled(self):
        return IsWriteProtected(self.view)

class P4RevertCommand(sublime_plugin.TextCommand):
    &#34;&#34;&#34;P4 Revert if unchanged&#34;&#34;&#34;
    def run(self, edit):
        os.system(&#34;p4 revert -a \&#34;&#34; + self.view.file_name() + &#34;\&#34;&#34;)
        UpdateViewWriteability(self.view)

    def is_enabled(self):
        return IsWriteable(self.view)

class P4AddCommand(sublime_plugin.TextCommand):
    &#34;&#34;&#34;P4 Add&#34;&#34;&#34;
    def run(self, edit):
        os.system(&#34;p4 add \&#34;&#34; + self.view.file_name() + &#34;\&#34;&#34;)
        UpdateViewWriteability(self.view)

    def is_enabled(self):
        return IsWriteable(self.view)&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>